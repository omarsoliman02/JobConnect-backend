openapi: 3.0.3
info:
  title: JobConnect API
  description: Job portal API for managing companies, jobs, applicants and applications
  version: 1.0.0
  contact:
    name: Omar Soliman
    email: omar.soliman@dauphine.eu
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8081
    description: Development Server

tags:
  - name: Companies
    description: Company management
  - name: Jobs
    description: Job posting operations
  - name: Applicants
    description: Applicant management
  - name: Applications
    description: Job application operations
  - name: Skills
    description: Skills management
  - name: Experiences
    description: Work experience operations

paths:
  /api/companies:
    get:
      tags:
        - Companies
      summary: Get all companies
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
    post:
      tags:
        - Companies
      summary: Create company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '201':
          description: Company created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'

  /api/companies/{companyId}:
    parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Companies
      summary: Get company by ID
      responses:
        '200':
          description: Company found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          description: Company not found
    put:
      tags:
        - Companies
      summary: Update company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
      responses:
        '200':
          description: Company updated
        '404':
          description: Company not found
    delete:
      tags:
        - Companies
      summary: Delete company
      responses:
        '204':
          description: Company deleted
        '404':
          description: Company not found

  /api/companies/{companyId}/jobs:
    parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Companies
        - Jobs
      summary: Get jobs by company
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '404':
          description: Company not found

  /api/jobs:
    get:
      tags:
        - Jobs
      summary: Get all jobs
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      tags:
        - Jobs
      summary: Create job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: Job created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'

  /api/jobs/{jobId}:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Jobs
      summary: Get job by ID
      responses:
        '200':
          description: Job found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found
    put:
      tags:
        - Jobs
      summary: Update job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          description: Job updated
        '404':
          description: Job not found
    delete:
      tags:
        - Jobs
      summary: Delete job
      responses:
        '204':
          description: Job deleted
        '404':
          description: Job not found

  /api/jobs/{jobId}/applications:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Jobs
        - Applications
      summary: Get applications for job
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'

  /api/applicants:
    get:
      tags:
        - Applicants
      summary: Get all applicants
      responses:
        '200':
          description: List of applicants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Applicant'
    post:
      tags:
        - Applicants
      summary: Create applicant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Applicant'
      responses:
        '201':
          description: Applicant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'

  /api/applicants/{applicantId}:
    parameters:
      - name: applicantId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Applicants
      summary: Get applicant by ID
      responses:
        '200':
          description: Applicant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applicant'
        '404':
          description: Applicant not found
    put:
      tags:
        - Applicants
      summary: Update applicant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Applicant'
      responses:
        '200':
          description: Applicant updated
        '404':
          description: Applicant not found
    delete:
      tags:
        - Applicants
      summary: Delete applicant
      responses:
        '204':
          description: Applicant deleted
        '404':
          description: Applicant not found

  /api/applicants/{applicantId}/applications:
    parameters:
      - name: applicantId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Applicants
        - Applications
      summary: Get applications by applicant
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'

  /api/applicants/{applicantId}/experiences:
    parameters:
      - name: applicantId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Applicants
        - Experiences
      summary: Get experiences by applicant
      responses:
        '200':
          description: List of experiences
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experience'

  /api/applications:
    get:
      tags:
        - Applications
      summary: Get all applications
      responses:
        '200':
          description: List of applications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
    post:
      tags:
        - Applications
      summary: Create application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
      responses:
        '201':
          description: Application created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /api/applications/{applicationId}:
    parameters:
      - name: applicationId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Applications
      summary: Get application by ID
      responses:
        '200':
          description: Application found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '404':
          description: Application not found
    delete:
      tags:
        - Applications
      summary: Delete application
      responses:
        '204':
          description: Application deleted
        '404':
          description: Application not found

components:
  schemas:
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier
        name:
          type: string
          description: Company name
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
      required:
        - name

    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        location:
          type: string
        jobType:
          type: string
          enum: [FULL_TIME, PART_TIME, CONTRACT, FREELANCE, INTERNSHIP]
          description: Type of employment
        minSalary:
          type: integer
          description: Minimum salary offered
        maxSalary:
          type: integer
          description: Maximum salary offered
        experienceLevel:
          type: string
          enum: [ENTRY_LEVEL, INTERMEDIATE, SENIOR, EXECUTIVE]
          description: Required experience level
        company:
          $ref: '#/components/schemas/CompanyRef'
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationRef'
      required:
        - title
        - description
        - location

    CompanyRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    Applicant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
      required:
        - firstName
        - lastName
        - email

    ApplicantRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
        applicant:
          $ref: '#/components/schemas/ApplicantRef'
        job:
          $ref: '#/components/schemas/JobRef'
        appliedAt:
          type: string
          format: date-time
      required:
        - applicant
        - job

    ApplicationRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    JobRef:
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id

    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - name

    Experience:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string
        role:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        applicant:
          $ref: '#/components/schemas/ApplicantRef'
      required:
        - companyName
        - role
        - startDate 